int sum(int x , int y ) 
{ 
  char _1_sum_$locals[40] ;
  union _1_sum_$node _1_sum_$stack[1][32] ;
  union _1_sum_$node *_1_sum_$sp[1] ;
  unsigned char *_1_sum_$pc[1] ;
  int _2__BARRIER_1 ;
  int _2__BARRIER_2 ;

  {
  _2__BARRIER_1 = 1;
  _2__BARRIER_2 = 1;
  _1_sum_$sp[0] = _1_sum_$stack[0];
  _1_sum_$pc[0] = _1_sum_$array[0];
  while (1) {
    switch (*(_1_sum_$pc[0])) {
    case _1_sum__store_void_star$right_STA_0$left_STA_1: 
    (_1_sum_$pc[0]) ++;
    *((void **)(_1_sum_$sp[0] + -1)->_void_star) = (_1_sum_$sp[0] + 0)->_void_star;
    _1_sum_$sp[0] += -2;
    break;
    case _1_sum__formal$result_STA_0$value_LIT_0: 
    (_1_sum_$pc[0]) ++;
    switch (*((int *)_1_sum_$pc[0])) {
    case 1: 
    (_1_sum_$sp[0] + 1)->_void_star = (void *)(& y);
    break;
    case 0: 
    (_1_sum_$sp[0] + 1)->_void_star = (void *)(& x);
    break;
    }
    (_1_sum_$sp[0]) ++;
    _1_sum_$pc[0] += 4;
    break;
    case _1_sum__store_int$left_STA_0$right_STA_1: 
    (_1_sum_$pc[0]) ++;
    *((int *)(_1_sum_$sp[0] + 0)->_void_star) = (_1_sum_$sp[0] + -1)->_int;
    _1_sum_$sp[0] += -2;
    break;
    case _1_sum__call$func_LIT_0: 
    (_1_sum_$pc[0]) ++;
    switch (*((int *)_1_sum_$pc[0])) {
    case 1: 
    *((int *)(_1_sum_$locals + 12)) = getpid();
    break;
    case 2: 
    printf(*((char const   * __restrict  *)(_1_sum_$locals + 24)), *((int *)(_1_sum_$locals + 32)));
    break;
    }
    _1_sum_$pc[0] += 4;
    break;
    case _1_sum__goto$label_LAB_0: 
    (_1_sum_$pc[0]) ++;
    _1_sum_$pc[0] += *((int *)_1_sum_$pc[0]);
    break;
    case _1_sum__convert_void_star2void_star$left_STA_0$result_STA_0: 
    (_1_sum_$pc[0]) ++;
    (_1_sum_$sp[0] + 0)->_void_star = (_1_sum_$sp[0] + 0)->_void_star;
    break;
    case _1_sum__local$result_STA_0$value_LIT_0: 
    (_1_sum_$pc[0]) ++;
    (_1_sum_$sp[0] + 1)->_void_star = (void *)(_1_sum_$locals + *((int *)_1_sum_$pc[0]));
    (_1_sum_$sp[0]) ++;
    _1_sum_$pc[0] += 4;
    break;
    case _1_sum__return_int$expr_STA_0: 
    (_1_sum_$pc[0]) ++;
    return ((_1_sum_$sp[0] + 0)->_int);
    break;
    case _1_sum__string$result_STA_0$value_LIT_0: 
    (_1_sum_$pc[0]) ++;
    (_1_sum_$sp[0] + 1)->_void_star = (void *)(_1_sum_$strings + *((int *)_1_sum_$pc[0]));
    (_1_sum_$sp[0]) ++;
    _1_sum_$pc[0] += 4;
    break;
    case _1_sum__PlusA_int_int2int$left_STA_0$result_STA_0$right_STA_1: 
    (_1_sum_$pc[0]) ++;
    (_1_sum_$sp[0] + -1)->_int = (_1_sum_$sp[0] + 0)->_int + (_1_sum_$sp[0] + -1)->_int;
    (_1_sum_$sp[0]) --;
    break;
    case _1_sum__load_int$left_STA_0$result_STA_0: 
    (_1_sum_$pc[0]) ++;
    (_1_sum_$sp[0] + 0)->_int = *((int *)(_1_sum_$sp[0] + 0)->_void_star);
    break;
    }
  }
}
}